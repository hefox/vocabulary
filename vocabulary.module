<?php

include('vocabulary.taxonomy_menu.inc');

function vocabulary_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'vocabulary'),
  );
}


function vocabulary_menu() {
  $items['taxonomy/%taxonomy_vocabulary'] = array(
    'title callback' => 'vocabulary_page_title',
    'title arguments' => array(1),
    'page callback' => 'vocabulary_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['taxonomy/%taxonomy_vocabulary/view'] = array(
    'title' => 'View',
    'page callback' => 'vocabulary_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $path = drupal_get_path('module', 'taxonomy');
  $items['taxonomy/%taxonomy_vocabulary/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'taxonomy_admin_vocabulary_edit',
    'page arguments' => array(1),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'taxonomy.admin.inc',
    'file path' => $path,
    'weight' => 5,
  );
 $items['taxonomy/%taxonomy_vocabulary/list'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_overview_terms', 1),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $path,
    'file' => 'taxonomy.admin.inc',
    'weight' => 10,

  );
  return $items;
}

/*Allow for autocomplete to have multiple vocabularies*/
/*
 * Implementation of hook_menu_alter
*/
function vocabulary_menu_alter(&$items) {
  $items['taxonomy/autocomplete']['page callback'] = 'vocabulary_taxonomy_autocomplete';
  unset($items['taxonomy/autocomplete']['file']);
}

function vocabulary_taxonomy_autocomplete($vid, $string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $array = drupal_explode_tags($string);
  $vocabs = explode(" ",$vid);
  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
    $args = $vocabs;
    $args[] = $last_string ;
    $result = db_query_range(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t WHERE t.vid in (".db_placeholders($vocabs).") AND LOWER(t.name) LIKE LOWER('%%%s%%')", 't', 'tid'), $args, 0, 10);

    $prefix = count($array) ? implode(', ', $array) .', ' : '';

    while ($tag = db_fetch_object($result)) {
      $n = $tag->name;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {
        $n = '"'. str_replace('"', '""', $tag->name) .'"';
      }
      $matches[$prefix . $n] = check_plain($tag->name);
    }
  }

  drupal_json($matches);
}

function vocabulary_page_title($vocabulary) {
  return check_plain($vocabulary->name);
}
/* will not work, can't just target that path. 
function vocabulary_path_alias_types() {
  return array('taxonomy/%'=>t("Just vocabularies"));
}
*/
function vocabulary_page($vocabulary) {
  drupal_set_title(check_plain($vocabulary->name));
    $page            = isset($_GET['page']) ? $_GET['page'] : 0;
      $results = pager_query(db_rewrite_sql('SELECT t.*, h.parent FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d ORDER BY weight, name', 't', 'tid'), 50, 0, NULL, $vocabulary->vid);
    $total_entries = db_query(db_rewrite_sql('SELECT count(*) FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d', 't', 'tid'), 50, 0, NULL, $vocabulary->vid);
    while ($term = db_fetch_object($results)) {
      $output .= "<h3 class='term-name'>".l(check_plain($term->name),taxonomy_term_path($term))."</h3>" 
        . "<div class='term-description'>".filter_xss($term->description)."</div>";
    }
    
    
    if ($output) return $output . theme('pager', NULL, variable_get('default_nodes_main', 10));
    else return t("No terms found.");
}

function vocabulary_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  if (arg(0) == 'taxonomy' && arg(2)=='edit') $form['#submit'][] =  'vocabulary_taxonomy_form_vocabulary';
 
}

function vocabulary_taxonomy_form_vocabulary($form, &$form_state) {
  $form_state['values']['vid'];
  $form_state['redirect'] = 'taxonomy/'.$form_state['values']['vid'];
  return;
}

/* token stuff */
/*
 * Implementation of hook_token_values
 */

function vocabulary_token_values($type, $object = NULL) {

  $values = array();

  switch ($type) {
    case 'vocabulary':
      $values['vid'] = $object->vid;
      $values['vocab'] = check_plain($object->name);
      $values['vocab-raw'] = $object->name;
      break;
  }
  return $values;
}
/*
 * Implementation of hook_token_list
 */
function vocabulary_token_list($type = 'all') {
  $tokens = array();
    if ($type == 'vocabulary' || $type == 'all') {
      $tokens['vocabulary']['vid'] = t('Vocabulary vid.');
      $tokens['vocabulary']['vocab-raw'] = t('Raw vocabulary name.');
      $tokens['vocabulary']['vocab'] = t('Vocabulary name.');
    }

  return $tokens;
}
/*
 * Pathauto stuff
 */
/*
 * Implementation of hook_pathauto
 */
function vocabulary_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'vocabulary';
      $settings['token_type'] = 'vocabulary';
      $settings['groupheader'] = t('Vocabulary path settings');
      $settings['patterndefault'] = t('category/[vocab-raw]');
      $patterns = token_get_list('vocabulary');
      foreach ($patterns as $type => $pattern_set) {
        if ($type != 'global') {
          foreach ($pattern_set as $pattern => $description) {
            $settings['placeholders']['['. $pattern .']'] = $description;
          }
        }
      }
      $settings['supportsfeeds'] = '0/feed';
      $settings['bulkname'] = t('Bulk generate aliases for vocabularies that are not aliased');
      $settings['bulkdescr'] = t('Generate aliases for all existing vocabularies which do not already have aliases.');

      return (object) $settings;
    default:
      break;
  }
}


/**
 * Generate aliases for all nodes without aliases.
 */
function vocabulary_pathauto_bulkupdate() {
  // From all node types, only attempt to update those with patterns
  // If there's a default pattern we assume all types might be updated.
  $pattern = trim(variable_get('pathauto_vocabulary_pattern', '')) ;
  if (!$pattern) return;
  $vocabularies =  taxonomy_get_vocabularies();
  $placeholders = array();
  $count = 0;
  foreach($vocabularies as $vocabulary) {
    $placeholders = pathauto_get_placeholders('vocabulary', $vocabulary);
    if (pathauto_create_alias('vocabulary', 'bulkupdate', $placeholders, "taxonomy/$vocabulary->vid", $vocabulary->vid)) {
      $count++;
    }
   } 

  drupal_set_message(format_plural($count,
    'Bulk generation of vocabularies completed, one alias generated.',
    'Bulk generation of vocabularies completed, @count aliases generated.'));
}

/**
 * Implementation of hook_taxonomy().
 */
function vocabulary_taxonomy($op, $type, $object = NULL) {
  switch ($type) {
    case 'vocabulary':
      switch ($op) {
        case 'insert':
        case 'update':
          _pathauto_include();
          // Use the category info to automatically create an alias
          $vocabulary = (object) $object;
          if ($vocabulary->name) {
            $placeholders = pathauto_get_placeholders('vocabulary', $vocabulary);
            pathauto_create_alias('vocabulary', $op, $placeholders, "taxonomy/$vocabulary->vid", $vocabulary->vid);
          }

          break;
        case 'delete':
          // If the category is deleted, remove the path aliases
          $vocabulary = (object) $object;
          path_set_alias('taxonomy/'. $vocabulary->vid);
          path_set_alias('taxonomy/'. $vocabulary->vid .'/0/feed');
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}


/*
Below all the junk to associate the page with ctools
*/
function vocabulary_page_manager_tasks() {
  return array(
    'vocabulary_view' => array(
      // This is a 'page' task and will fall under the page admin UI
      'task type' => 'page',
      'title' => t('Vocabulary template'),
      'admin title' => t('Vocabulary template'),
      'admin description' => t('When enabled, this overrides the default vocabulary module behavior for displaying vocabulary at <em>taxonomy/%taxonomy_vocabulary</em>.'),
      'admin path' => 'taxonomy/%taxonomy_vocabulary',
      'admin summary' => 'vocabulary_admin_summary',
  
      // Menu hooks so that we can alter the term/%term menu entry to point to us.
      'hook menu' => 'vocabulary_menu',
      'hook menu alter' => 'page_manager_vocabulary_menu_alter',
  
      // Provide a setting to the primary settings UI for Panels
      'admin settings' => 'vocabulary_admin_settings',
      // Even though we don't have subtasks, this allows us to save our settings.
      'save subtask callback' => 'vocabulary_save',
  
      // Callback to add items to the page managertask administration form:
      'task admin' => 'vocabulary_task_admin',
  
      // This is task uses 'context' handlers and must implement these to give the
      // handler data it needs.
      'handler type' => 'context',
      'get arguments' => 'vocabulary_get_arguments',
      'get context placeholders' => 'vocabulary_get_contexts',
  
      // Allow additional operations
      'operations' => array(
        'settings' => array(
          'title' => t('Settings'),
          'description' => t('Update settings specific to the Vocabulary view.'),
        ),
        // This lets it automatically add relevant information for task handlers.
        'handlers' => array('type' => 'handlers'),
      ),
  
      // Allow this to be enabled or disabled:
      'disabled' => variable_get('vocabulary_disabled', TRUE),
      'enable callback' => 'page_manager_vocabulary_enable',
  
      'operations' => array(
        'settings' => array(
          'type' => 'group',
          'class' => 'operations-settings',
          'title' => t('Settings'),
          'children' => array(
            'basic' => array(
              'title' => t('Basic'),
              'description' => t('Edit name, path and other basic settings for the page.'),
              'form' => 'vocabulary_settings',
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Callback defined by vocabulary_page_manager_tasks().
 *
 * Alter the term view input so that term view comes to us rather than the
 * normal term view process.
 */
function page_manager_vocabulary_menu_alter(&$items, $task) {
  if (variable_get('vocabulary_disabled', TRUE)) {
    return;
  }

  // Override the term view handler for our purpose, but only if someone else
  // has not already done so.
  if (isset($items['taxonomy/%taxonomy_vocabulary']) && $items['taxonomy/%taxonomy_vocabulary']['page callback'] == 'vocabulary_page' || variable_get('page_manager_override_anyway', FALSE)) {
    $items['taxonomy/%taxonomy_vocabulary']['page callback'] = 'page_manager_vocabulary';
    $items['taxonomy/%taxonomy_vocabulary']['file path'] = $task['path'];
    $items['taxonomy/%taxonomy_vocabulary']['file'] = $task['file'];
  }
  else {
    // automatically disable this task if it cannot be enabled.
    variable_set('vocabulary_disabled', TRUE);
    if (!empty($GLOBALS['page_manager_enabling_vocabulary'])) {
      drupal_set_message(t('Page manager module is unable to enable taxonomy/%taxonomy_vocabulary because some other module already has overridden with %callback.', array('%callback' => $items['taxonomy/%taxonomy_vocabulary']['page callback'])), 'error');
    }
  }
}

/**
 * Entry point for our overridden term view.
 *
 * This function asks its assigned handlers who, if anyone, would like
 * to run with it. If no one does, it passes through to Drupal core's
 * term view, which is term_page_view().
 */
function page_manager_vocabulary($vocabulary, $op = 'page') {
  // While we ordinarily should never actually get feeds through here,
  // just in case
  if ($op != 'feed') {
    // Load my task plugin
    $task = page_manager_get_task('vocabulary_view');

    // Load the term into a context.
    ctools_include('context');
    ctools_include('context-task-handler');
    
    $contexts = ctools_context_handler_get_task_contexts($task, '', array($vocabulary->vid));

    if (empty($contexts)) {
      return drupal_not_found();
    }

    // Add a fake tab for 'View' so that edit tabs can be added.
    if (user_access('administer page manager')) {
      ctools_include('menu');
      ctools_menu_add_tab(array(
        'title' => t('View'),
        'href' => $_GET['q'],
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      ));
    }
    $output = ctools_context_handler_render($task, '', $contexts, array($vocabulary->vid, $op));
    if ($output !== FALSE) {
      return $output;
    }
  }

  // Otherwise, fall back.
  return vocabulary_page($vocabulary, $op);
}

/**
 * Callback to get arguments provided by this task handler.
 *
 * Since this is the term view and there is no UI on the arguments, we
 * create dummy arguments that contain the needed data.
 */
function vocabulary_get_arguments($task, $subtask_id) {
  return array(
    array(
      'keyword' => 'vocabulary',
      'identifier' => t('Vocabulary being viewed'),
      'id' => 1,
      'name' => 'vocabulary',
      'settings' => array('input_form' => 'vid'),
      'default' => '404',
    ),
  );
}

/**
 * Callback to get context placeholders provided by this handler.
 */
function vocabulary_get_contexts($task, $subtask_id) {
  return ctools_context_get_placeholders_from_argument(vocabulary_get_arguments($task, $subtask_id));
}

/**
 * Settings page for this item.
 */
function vocabulary_settings(&$form, &$form_state) {
  // This passes thru because the setting can also appear on the main Panels
  // settings form. If $settings is an array it will just pick up the default.
  $settings = isset($form_state->update_values) ? $form_state->update_values : array();
  vocabulary_admin_settings($form, $settings);
}

/**
 * Copy form values into the page cache.
 */
function vocabulary_settings_submit(&$form, &$form_state) {
  $form_state['page']->update_values = $form_state['values'];
}

/**
 * Save when the page cache is saved.
 */
function vocabulary_save($subtask, $cache) {
}

/**
 * Provide a setting to the Panels administrative form.
 */
function vocabulary_admin_settings(&$form, $settings = array()) {
  return array(); 
}

/**
 * Callback to enable/disable the page from the UI.
 */
function page_manager_vocabulary_enable($cache, $status) {
  variable_set('vocabulary_disabled', $status);

  // Set a global flag so that the menu routine knows it needs
  // to set a message if enabling cannot be done.
  if (!$status) {
    $GLOBALS['page_manager_enabling_vocabulary'] = TRUE;
  }
}

/**
 * Provide a nice administrative summary of the page so an admin can see at a
 * glance what this page does and how it is configured.
 */
function vocabulary_admin_summary($task, $subtask) {
  $task_name = page_manager_make_task_name($task['name'], $subtask['name']);

  $rows[] = array(
    array('class' => t('page-summary-label'), 'data' => t('Path')),
    array('class' => t('page-summary-data'), 'data' => 'taxonomy/%taxonomy_vocabulary'),
    array('class' => t('page-summary-operation'), 'data' => ''),
  );

  $rows[] = array(
    array('class' => t('page-summary-label'), 'data' => t('Access')),
    array('class' => t('page-summary-data'), 'data' => t('This page is publicly accessible.')),
    array('class' => t('page-summary-operation'), 'data' => ''),
  );

  $menu = t('No menu entry');

  $rows[] = array(
    array('class' => t('page-summary-label'), 'data' => t('Menu')),
    array('class' => t('page-summary-data'), 'data' => $menu),
    array('class' => t('page-summary-operation'), 'data' => ''),
  );


  $rows[] = array(
    array('class' => t('page-summary-label'), 'data' => t('%taxonomy_vocabulary')),
    array('class' => t('page-summary-data'), 'data' => ''),
    array('class' => t('page-summary-operation'), 'data' => ''),
  );

  $output = theme('table', array(), $rows, array('id' => 'page-manager-page-summary'));
  return $output;
}



/**
 * Implementation of specially named hook_ctools_arguments().
 */
function vocabulary_ctools_arguments() {
  return array(
    'vocabulary' => array(
      'title' => t("Vocabulary ID"),
      // keyword to use for %substitution
      'keyword' => 'vocabulary',
      'description' => t('Creates a vocabulary from a vid or vocabulary name'),
      'context' => 'vocabulary_context',
      'default' => array('input_form' => 'vid'),
      'settings form' => 'vocabulary_settings_form',
      'placeholder form' => 'vocabulary_ctools_argument_placeholder',
    ),
  );
}

/**
 * Discover if this argument gives us the term we crave.
 */
function vocabulary_context($arg = NULL, $conf = NULL, $empty = FALSE) {
  // If unset it wants a generic, unfilled context.
  if ($empty) {
    return ctools_context_create_empty('vocabulary');
  }
  switch ($conf['input_form']) {
    case 'vid':
    default:
      if ($arg->vid) {
        $vocabulary = $arg;
        break;
      }
      if (!is_numeric($arg)) {
        return FALSE;
      }
      $vocabulary = taxonomy_vocabulary_load($arg);
      break;

    case 'vocabulary':
      if ($arg->vid) {
        $vocabulary = $arg;
        break;
      }
      $vid = db_result(db_query("SELECT vid from {vocabulary} where lower(name) = %s",lower($arg)));
      $vocabulary = taxonomy_vocabulary_load($vid);
      break;
  }

  if (empty($vocabulary)) {
    return NULL;
  }


  $context = ctools_context_create('vocabulary', $vocabulary);
  $context->original_argument = $arg;
  return $context;
}

/**
 * Settings form for the argument
 */
function vocabulary_settings_form(&$form, &$form_state, $conf) {
  // @todo allow synonym use like Views does.
  $form['settings']['input_form'] = array(
    '#title' => t('Argument type'),
    '#type' => 'radios',
    '#options' => array('tid' => t('Vocabulary ID'), 'term' => t('Vocabulary name')),
    '#default_value' => $conf['input_form'],
    '#prefix' => '<div class="clear-block">',
    '#suffix' => '</div>',
  );

}

/**
 * Form fragment to get an argument to convert a placeholder for preview.
 */
function vocabulary_ctools_argument_placeholder($conf) {
  switch ($conf['input_form']) {
    case 'vid':
    default:
      return array(
        '#type' => 'textfield',
        '#description' => t('Enter a vocabulary ID.'),
      );
    case 'vocabulary':
      return array(
        '#type' => 'textfield',
        '#description' => t('Enter a vocabulary name.'),
      );
  }
}
